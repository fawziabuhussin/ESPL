# Lab 5 - Static ELF Loader

## Introduction

This lab involves writing a static loader to load and execute 32-bit ELF formatted executables that do not use dynamic libraries. The loader will utilize the `system_call` interface. The code should be compiled with the `-m32` flag.

## Task 0: Iterator Over Program Headers

### Description
Write a program that receives a single command-line argument, which is the filename of a 32-bit ELF executable. Implement a function `foreach_phdr` to iterate over the program headers in the file and apply a given function to each header.

### Function Signature
```c
int foreach_phdr(void *map_start, void (*func)(Elf32_Phdr *, int), int arg);

Purpose

    map_start: Address in virtual memory where the executable is mapped.
    func: Function to apply to each program header.
    arg: Additional argument for future use (not used in this task).

Verification

Apply the iterator to a 32-bit ELF file and print a message for each program header visited:

To be printed >>> Program header number i at address x
--------------------------------------------------------------------------
--------------------------------------------------------------------------

                    Task 1: Readelf -l Functionality

--------------------------------------------------------------------------
--------------------------------------------------------------------------


> Task 1a: Display Program Headers

Using the iterator from Task 0, implement a function to display all information in the Elf32_Phdr structure for each program header, similar to readelf -l.
Example Output: 

Type Offset VirtAddr PhysAddr FileSiz MemSiz Flg Align
PHDR 0x000034 0x04048034 0x04048034 0x00100 0x00100 R E 0x4
INTERP 0x000134 0x04048134 0x04048134 0x00013 0x00013 R 0x1
LOAD 0x000000 0x04048000 0x04048000 0x008a4 0x008a4 R E 0x1000
LOAD 0x0008a4 0x040498a4 0x040498a4 0x0011c 0x00120 RW 0x1000
DYNAMIC 0x0008b0 0x040498b0 0x040498b0 0x000c8 0x000c8 RW 0x4
NOTE 0x000148 0x04048148 0x04048148 0x00020 0x00020 R 0x4

Read OUTPUT of the file loadme: 

> Task 1b: Prepare Data for Memory Mapping

For each program header, print the appropriate protection and mapping flags for mmap. Ensure that the protection flags are correctly translated from the program header flags.

--------------------------------------------------------------------------
--------------------------------------------------------------------------

                    Task 2: Implement the Loader

--------------------------------------------------------------------------
--------------------------------------------------------------------------

Task 2a: Linking and Mapping

Use the provided linking script and start.o to compile your loader. Ensure that the program is linked without standard libraries but with the system_call interface.


Task 2b: Mapping Segments to Memory

Implement the load_phdr function to map segments with the PT_LOAD flag to memory using mmap.
Function Signature : void load_phdr(Elf32_Phdr *phdr, int fd);

Task 2c: Passing Control to Loaded Program

Use the provided startup function to pass control to the loaded program. Test with programs that do not require command-line arguments.
Function Signature

c

int startup(int argc, char **argv, void (*start)());

Task 2d: Command-Line Arguments

Ensure your loader can pass command-line arguments to the loaded program.
Example Command

my_loader my_test_program arg1 arg2 ...
